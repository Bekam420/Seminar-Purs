
Semestralni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024bc  080024bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080024d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080024d0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ca1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001502  00000000  00000000  00027d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  00029228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  000298c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201f4  00000000  00000000  00029dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008dc5  00000000  00000000  00049fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c494b  00000000  00000000  00052d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a3c  00000000  00000000  001176d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00119110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002484 	.word	0x08002484

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002484 	.word	0x08002484

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Keypad_Scan>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char Keypad_Scan(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  char key = '\0';
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]

  // Podesi svaki stupac na nisku razinu, jedan po jedan, i provjeri dali su redovi na visokoj razini (pritisnutu tipku).

 for (int col = 0; col < 4; col++)
 800051e:	2300      	movs	r3, #0
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	e09a      	b.n	800065a <Keypad_Scan+0x146>
 {
   // Postavi sve stupce na visoku razinu (osim trenutnog stupca)
   HAL_GPIO_WritePin(COLS_GPIO_PORT_A, COL1_PIN, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052a:	4850      	ldr	r0, [pc, #320]	; (800066c <Keypad_Scan+0x158>)
 800052c:	f000 feb0 	bl	8001290 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL2_PIN | COL3_PIN | COL4_PIN, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000536:	484e      	ldr	r0, [pc, #312]	; (8000670 <Keypad_Scan+0x15c>)
 8000538:	f000 feaa 	bl	8001290 <HAL_GPIO_WritePin>

   // Postavi trenutni stupac na nisku razinu
    switch (col)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d824      	bhi.n	800058c <Keypad_Scan+0x78>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <Keypad_Scan+0x34>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000559 	.word	0x08000559
 800054c:	08000567 	.word	0x08000567
 8000550:	08000573 	.word	0x08000573
 8000554:	0800057f 	.word	0x0800057f
    {
    case 0:
      HAL_GPIO_WritePin(COLS_GPIO_PORT_A, COL1_PIN, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4843      	ldr	r0, [pc, #268]	; (800066c <Keypad_Scan+0x158>)
 8000560:	f000 fe96 	bl	8001290 <HAL_GPIO_WritePin>
      break;
 8000564:	e012      	b.n	800058c <Keypad_Scan+0x78>
    case 1:
      HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL2_PIN, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	4841      	ldr	r0, [pc, #260]	; (8000670 <Keypad_Scan+0x15c>)
 800056c:	f000 fe90 	bl	8001290 <HAL_GPIO_WritePin>
      break;
 8000570:	e00c      	b.n	800058c <Keypad_Scan+0x78>
    case 2:
      HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL3_PIN, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2110      	movs	r1, #16
 8000576:	483e      	ldr	r0, [pc, #248]	; (8000670 <Keypad_Scan+0x15c>)
 8000578:	f000 fe8a 	bl	8001290 <HAL_GPIO_WritePin>
      break;
 800057c:	e006      	b.n	800058c <Keypad_Scan+0x78>
    case 3:
      HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL4_PIN, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000584:	483a      	ldr	r0, [pc, #232]	; (8000670 <Keypad_Scan+0x15c>)
 8000586:	f000 fe83 	bl	8001290 <HAL_GPIO_WritePin>
      break;
 800058a:	bf00      	nop
    }

    // Provjeri redove za visoku razinu (pritisnuta tipka)
    if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_A, ROW1_PIN) == GPIO_PIN_RESET)
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	4837      	ldr	r0, [pc, #220]	; (800066c <Keypad_Scan+0x158>)
 8000590:	f000 fe66 	bl	8001260 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d111      	bne.n	80005be <Keypad_Scan+0xaa>
    {
      key = (col == 0) ? '1' : (col == 1) ? '2' : (col == 2) ? '3' : 'A';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <Keypad_Scan+0xa4>
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d006      	beq.n	80005b4 <Keypad_Scan+0xa0>
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d101      	bne.n	80005b0 <Keypad_Scan+0x9c>
 80005ac:	2333      	movs	r3, #51	; 0x33
 80005ae:	e004      	b.n	80005ba <Keypad_Scan+0xa6>
 80005b0:	2341      	movs	r3, #65	; 0x41
 80005b2:	e002      	b.n	80005ba <Keypad_Scan+0xa6>
 80005b4:	2332      	movs	r3, #50	; 0x32
 80005b6:	e000      	b.n	80005ba <Keypad_Scan+0xa6>
 80005b8:	2331      	movs	r3, #49	; 0x31
 80005ba:	71fb      	strb	r3, [r7, #7]
      break;
 80005bc:	e051      	b.n	8000662 <Keypad_Scan+0x14e>
    }
    else if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_A, ROW2_PIN) == GPIO_PIN_RESET)
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	482a      	ldr	r0, [pc, #168]	; (800066c <Keypad_Scan+0x158>)
 80005c2:	f000 fe4d 	bl	8001260 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d111      	bne.n	80005f0 <Keypad_Scan+0xdc>
    {
      key = (col == 0) ? '4' : (col == 1) ? '5' : (col == 2) ? '6' : 'B';
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00b      	beq.n	80005ea <Keypad_Scan+0xd6>
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d006      	beq.n	80005e6 <Keypad_Scan+0xd2>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d101      	bne.n	80005e2 <Keypad_Scan+0xce>
 80005de:	2336      	movs	r3, #54	; 0x36
 80005e0:	e004      	b.n	80005ec <Keypad_Scan+0xd8>
 80005e2:	2342      	movs	r3, #66	; 0x42
 80005e4:	e002      	b.n	80005ec <Keypad_Scan+0xd8>
 80005e6:	2335      	movs	r3, #53	; 0x35
 80005e8:	e000      	b.n	80005ec <Keypad_Scan+0xd8>
 80005ea:	2334      	movs	r3, #52	; 0x34
 80005ec:	71fb      	strb	r3, [r7, #7]
      break;
 80005ee:	e038      	b.n	8000662 <Keypad_Scan+0x14e>
    }
    else if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_B, ROW3_PIN) == GPIO_PIN_RESET)
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	481f      	ldr	r0, [pc, #124]	; (8000670 <Keypad_Scan+0x15c>)
 80005f4:	f000 fe34 	bl	8001260 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d111      	bne.n	8000622 <Keypad_Scan+0x10e>
    {
      key = (col == 0) ? '7' : (col == 1) ? '8' : (col == 2) ? '9' : 'C';
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <Keypad_Scan+0x108>
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d006      	beq.n	8000618 <Keypad_Scan+0x104>
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d101      	bne.n	8000614 <Keypad_Scan+0x100>
 8000610:	2339      	movs	r3, #57	; 0x39
 8000612:	e004      	b.n	800061e <Keypad_Scan+0x10a>
 8000614:	2343      	movs	r3, #67	; 0x43
 8000616:	e002      	b.n	800061e <Keypad_Scan+0x10a>
 8000618:	2338      	movs	r3, #56	; 0x38
 800061a:	e000      	b.n	800061e <Keypad_Scan+0x10a>
 800061c:	2337      	movs	r3, #55	; 0x37
 800061e:	71fb      	strb	r3, [r7, #7]
      break;
 8000620:	e01f      	b.n	8000662 <Keypad_Scan+0x14e>
    }
    else if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_C, ROW4_PIN) == GPIO_PIN_RESET)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <Keypad_Scan+0x160>)
 8000626:	f000 fe1b 	bl	8001260 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d111      	bne.n	8000654 <Keypad_Scan+0x140>
    {
      key = (col == 0) ? '*' : (col == 1) ? '0' : (col == 2) ? '#' : 'D';
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00b      	beq.n	800064e <Keypad_Scan+0x13a>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d006      	beq.n	800064a <Keypad_Scan+0x136>
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d101      	bne.n	8000646 <Keypad_Scan+0x132>
 8000642:	2323      	movs	r3, #35	; 0x23
 8000644:	e004      	b.n	8000650 <Keypad_Scan+0x13c>
 8000646:	2344      	movs	r3, #68	; 0x44
 8000648:	e002      	b.n	8000650 <Keypad_Scan+0x13c>
 800064a:	2330      	movs	r3, #48	; 0x30
 800064c:	e000      	b.n	8000650 <Keypad_Scan+0x13c>
 800064e:	232a      	movs	r3, #42	; 0x2a
 8000650:	71fb      	strb	r3, [r7, #7]
      break;
 8000652:	e006      	b.n	8000662 <Keypad_Scan+0x14e>
 for (int col = 0; col < 4; col++)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	f77f af61 	ble.w	8000524 <Keypad_Scan+0x10>
    }
  }

  return key;
 8000662:	79fb      	ldrb	r3, [r7, #7]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020000 	.word	0x40020000
 8000670:	40020400 	.word	0x40020400
 8000674:	40020800 	.word	0x40020800

08000678 <main>:
  /**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fadf 	bl	8000c40 <HAL_Init>

  /* USER CODE BEGIN Init */

  static uint8_t index = 0;
  char stored_password[PASSWORD_LENGTH + 1] = {0}; // +1 za null znak
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	2300      	movs	r3, #0
 8000688:	733b      	strb	r3, [r7, #12]
  char entered_password[PASSWORD_LENGTH + 1] = {0}; // +1 za null znak
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	713b      	strb	r3, [r7, #4]
  uint8_t password_set = 0; // 0 ako lozinka nije postavljena, 1 ako je postavljena
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f8a1 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f937 	bl	800090c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069e:	f000 f90b 	bl	80008b8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   char key = Keypad_Scan();
 80006a2:	f7ff ff37 	bl	8000514 <Keypad_Scan>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73bb      	strb	r3, [r7, #14]
   if (key != '\0' && key == '#')
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d055      	beq.n	800075c <main+0xe4>
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	2b23      	cmp	r3, #35	; 0x23
 80006b4:	d152      	bne.n	800075c <main+0xe4>
   {
     if (index == PASSWORD_LENGTH) // Provjera dali je u indeksu koliko je zaporuka duga
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <main+0x158>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	f040 8086 	bne.w	80007cc <main+0x154>
     {
       entered_password[index] = '\0'; // Završavanje null znakom
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <main+0x158>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3310      	adds	r3, #16
 80006c6:	443b      	add	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	f803 2c10 	strb.w	r2, [r3, #-16]
       if (password_set == 0)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d117      	bne.n	8000704 <main+0x8c>
       {
         // Postavljanje lozinke
         strcpy(stored_password, entered_password);
 80006d4:	463a      	mov	r2, r7
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fec9 	bl	8002474 <strcpy>
         password_set = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_SET); // Upali LED
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	483a      	ldr	r0, [pc, #232]	; (80007d4 <main+0x15c>)
 80006ec:	f000 fdd0 	bl	8001290 <HAL_GPIO_WritePin>
         HAL_Delay(1000); // Pričekaj 1 sekunde
 80006f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f4:	f000 fb16 	bl	8000d24 <HAL_Delay>
         HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_RESET); // Ugasi LED
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	4835      	ldr	r0, [pc, #212]	; (80007d4 <main+0x15c>)
 80006fe:	f000 fdc7 	bl	8001290 <HAL_GPIO_WritePin>
 8000702:	e021      	b.n	8000748 <main+0xd0>
       }
       else
       {
         // Provjera lozinke
         if (strcmp(stored_password, entered_password) == 0)
 8000704:	463a      	mov	r2, r7
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd79 	bl	8000204 <strcmp>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d117      	bne.n	8000748 <main+0xd0>
         {
           HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_SET); // Upali LED
 8000718:	2201      	movs	r2, #1
 800071a:	2120      	movs	r1, #32
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <main+0x15c>)
 800071e:	f000 fdb7 	bl	8001290 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_SET); // Upali relej
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	482c      	ldr	r0, [pc, #176]	; (80007d8 <main+0x160>)
 8000728:	f000 fdb2 	bl	8001290 <HAL_GPIO_WritePin>
           HAL_Delay(3000); // Pričekaj 3 sekunde
 800072c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000730:	f000 faf8 	bl	8000d24 <HAL_Delay>
           HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_RESET); // Ugasi LED
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	4826      	ldr	r0, [pc, #152]	; (80007d4 <main+0x15c>)
 800073a:	f000 fda9 	bl	8001290 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_RESET); // Ugasi relej
 800073e:	2200      	movs	r2, #0
 8000740:	2101      	movs	r1, #1
 8000742:	4825      	ldr	r0, [pc, #148]	; (80007d8 <main+0x160>)
 8000744:	f000 fda4 	bl	8001290 <HAL_GPIO_WritePin>
         }
       }
       // Resetiranje unesene lozinke i indeksa
       memset(entered_password, 0, sizeof(entered_password));
 8000748:	463b      	mov	r3, r7
 800074a:	2205      	movs	r2, #5
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fe64 	bl	800241c <memset>
       index = 0;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <main+0x158>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
     if (index == PASSWORD_LENGTH) // Provjera dali je u indeksu koliko je zaporuka duga
 800075a:	e037      	b.n	80007cc <main+0x154>
     }
   }
   else if (key == 'C') // C kao master switch
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	2b43      	cmp	r3, #67	; 0x43
 8000760:	d11c      	bne.n	800079c <main+0x124>
   {
     // Brisanje pohranjene lozinke
     memset(stored_password, 0, sizeof(stored_password));
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2205      	movs	r2, #5
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fe56 	bl	800241c <memset>
     password_set = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
     // Resetiranje unesene lozinke i indeksa
     memset(entered_password, 0, sizeof(entered_password));
 8000774:	463b      	mov	r3, r7
 8000776:	2205      	movs	r2, #5
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fe4e 	bl	800241c <memset>
     index = 0;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0x158>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
     // Gašenje LED-ova i releja kao indikacija resetiranja lozinke
     HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <main+0x15c>)
 800078c:	f000 fd80 	bl	8001290 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <main+0x160>)
 8000796:	f000 fd7b 	bl	8001290 <HAL_GPIO_WritePin>
 800079a:	e782      	b.n	80006a2 <main+0x2a>
   }
   else if (index < PASSWORD_LENGTH && key >= '0' && key <= '9')
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <main+0x158>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	f63f af7e 	bhi.w	80006a2 <main+0x2a>
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	2b2f      	cmp	r3, #47	; 0x2f
 80007aa:	f67f af7a 	bls.w	80006a2 <main+0x2a>
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	2b39      	cmp	r3, #57	; 0x39
 80007b2:	f63f af76 	bhi.w	80006a2 <main+0x2a>
   {
     entered_password[index++] = key;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <main+0x158>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	b2d1      	uxtb	r1, r2
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <main+0x158>)
 80007c0:	7011      	strb	r1, [r2, #0]
 80007c2:	3310      	adds	r3, #16
 80007c4:	443b      	add	r3, r7
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	f803 2c10 	strb.w	r2, [r3, #-16]
  {
 80007cc:	e769      	b.n	80006a2 <main+0x2a>
 80007ce:	bf00      	nop
 80007d0:	20000070 	.word	0x20000070
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	; 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2234      	movs	r2, #52	; 0x34
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fe16 	bl	800241c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <SystemClock_Config+0xd4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <SystemClock_Config+0xd4>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <SystemClock_Config+0xd4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <SystemClock_Config+0xd8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <SystemClock_Config+0xd8>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <SystemClock_Config+0xd8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	2310      	movs	r3, #16
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000850:	2310      	movs	r3, #16
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000854:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000858:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800085a:	2304      	movs	r3, #4
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f874 	bl	8001958 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000876:	f000 f907 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800087a:	230f      	movs	r3, #15
 800087c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2302      	movs	r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2102      	movs	r1, #2
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fd14 	bl	80012c4 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008a2:	f000 f8f1 	bl	8000a88 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	; 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f001 fad0 	bl	8001e94 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f8c5 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b54      	ldr	r3, [pc, #336]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <MX_GPIO_Init+0x16c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b46      	ldr	r3, [pc, #280]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a45      	ldr	r2, [pc, #276]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <MX_GPIO_Init+0x16c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b3f      	ldr	r3, [pc, #252]	; (8000a78 <MX_GPIO_Init+0x16c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a3e      	ldr	r2, [pc, #248]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <MX_GPIO_Init+0x16c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	4839      	ldr	r0, [pc, #228]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000998:	f000 fc7a 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7190 	mov.w	r1, #288	; 0x120
 80009a2:	4837      	ldr	r0, [pc, #220]	; (8000a80 <MX_GPIO_Init+0x174>)
 80009a4:	f000 fc74 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80009ae:	4835      	ldr	r0, [pc, #212]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009b0:	f000 fc6e 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	482c      	ldr	r0, [pc, #176]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009cc:	f000 fab4 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4825      	ldr	r0, [pc, #148]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009e8:	f000 faa6 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80009ec:	f44f 7390 	mov.w	r3, #288	; 0x120
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	481e      	ldr	r0, [pc, #120]	; (8000a80 <MX_GPIO_Init+0x174>)
 8000a06:	f000 fa97 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a0a:	23c0      	movs	r3, #192	; 0xc0
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_GPIO_Init+0x174>)
 8000a1e:	f000 fa8b 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000a22:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000a3c:	f000 fa7c 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000a54:	f000 fa70 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000a6c:	f000 fa64 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f000 f9fc 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12b      	bne.n	8000b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3e:	230c      	movs	r3, #12
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_UART_MspInit+0x8c>)
 8000b5a:	f000 f9ed 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f890 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 fc07 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fd2b 	bl	8000678 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c30:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 8000c34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c38:	20000078 	.word	0x20000078

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f931 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff ff0e 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f93b 	bl	8000f1e <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f911 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000074 	.word	0x20000074

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000074 	.word	0x20000074

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff47 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff5c 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb0 	bl	8000e8c <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e165      	b.n	8001220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8154 	bne.w	800121a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80ae 	beq.w	800121a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <HAL_GPIO_Init+0x300>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <HAL_GPIO_Init+0x300>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b5a      	ldr	r3, [pc, #360]	; (8001238 <HAL_GPIO_Init+0x300>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a58      	ldr	r2, [pc, #352]	; (800123c <HAL_GPIO_Init+0x304>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_GPIO_Init+0x308>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x21a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <HAL_GPIO_Init+0x30c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x216>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x212>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x314>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_GPIO_Init+0x318>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x20a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4a      	ldr	r2, [pc, #296]	; (8001254 <HAL_GPIO_Init+0x31c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x206>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a49      	ldr	r2, [pc, #292]	; (8001258 <HAL_GPIO_Init+0x320>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x202>
 8001136:	2306      	movs	r3, #6
 8001138:	e00c      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 800113a:	2307      	movs	r3, #7
 800113c:	e00a      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 800113e:	2305      	movs	r3, #5
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 8001142:	2304      	movs	r3, #4
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x21c>
 8001152:	2300      	movs	r3, #0
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001164:	4935      	ldr	r1, [pc, #212]	; (800123c <HAL_GPIO_Init+0x304>)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <HAL_GPIO_Init+0x324>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001196:	4a31      	ldr	r2, [pc, #196]	; (800125c <HAL_GPIO_Init+0x324>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <HAL_GPIO_Init+0x324>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_GPIO_Init+0x324>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <HAL_GPIO_Init+0x324>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <HAL_GPIO_Init+0x324>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_GPIO_Init+0x324>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_GPIO_Init+0x324>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f67f ae96 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40021400 	.word	0x40021400
 8001258:	40021800 	.word	0x40021800
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e001      	b.n	8001282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0cc      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4b68      	ldr	r3, [pc, #416]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d90c      	bls.n	8001300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b8      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800133a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494d      	ldr	r1, [pc, #308]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d044      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d003      	beq.n	8001382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800137e:	2b03      	cmp	r3, #3
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e067      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f023 0203 	bic.w	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4934      	ldr	r1, [pc, #208]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b4:	f7ff fcaa 	bl	8000d0c <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013bc:	f7ff fca6 	bl	8000d0c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e04f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 020c 	and.w	r2, r3, #12
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d1eb      	bne.n	80013bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d20c      	bcs.n	800140c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e032      	b.n	8001472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4916      	ldr	r1, [pc, #88]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f855 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 800144e:	4602      	mov	r2, r0
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	490a      	ldr	r1, [pc, #40]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_ClockConfig+0x1c8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fc0a 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023c00 	.word	0x40023c00
 8001480:	40023800 	.word	0x40023800
 8001484:	0800249c 	.word	0x0800249c
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff0 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	0a9b      	lsrs	r3, r3, #10
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4903      	ldr	r1, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	080024ac 	.word	0x080024ac

080014d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014d4:	f7ff ffdc 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	0b5b      	lsrs	r3, r3, #13
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4903      	ldr	r1, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	080024ac 	.word	0x080024ac

080014f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014fc:	b0ae      	sub	sp, #184	; 0xb8
 80014fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151e:	4bcb      	ldr	r3, [pc, #812]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b0c      	cmp	r3, #12
 8001528:	f200 8206 	bhi.w	8001938 <HAL_RCC_GetSysClockFreq+0x440>
 800152c:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_RCC_GetSysClockFreq+0x3c>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	08001569 	.word	0x08001569
 8001538:	08001939 	.word	0x08001939
 800153c:	08001939 	.word	0x08001939
 8001540:	08001939 	.word	0x08001939
 8001544:	08001571 	.word	0x08001571
 8001548:	08001939 	.word	0x08001939
 800154c:	08001939 	.word	0x08001939
 8001550:	08001939 	.word	0x08001939
 8001554:	08001579 	.word	0x08001579
 8001558:	08001939 	.word	0x08001939
 800155c:	08001939 	.word	0x08001939
 8001560:	08001939 	.word	0x08001939
 8001564:	08001769 	.word	0x08001769
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001568:	4bb9      	ldr	r3, [pc, #740]	; (8001850 <HAL_RCC_GetSysClockFreq+0x358>)
 800156a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800156e:	e1e7      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001570:	4bb8      	ldr	r3, [pc, #736]	; (8001854 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001576:	e1e3      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001578:	4bb4      	ldr	r3, [pc, #720]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001584:	4bb1      	ldr	r3, [pc, #708]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d071      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001590:	4bae      	ldr	r3, [pc, #696]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	2200      	movs	r2, #0
 8001598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800159c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015b6:	4622      	mov	r2, r4
 80015b8:	462b      	mov	r3, r5
 80015ba:	f04f 0000 	mov.w	r0, #0
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	0159      	lsls	r1, r3, #5
 80015c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c8:	0150      	lsls	r0, r2, #5
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4621      	mov	r1, r4
 80015d0:	1a51      	subs	r1, r2, r1
 80015d2:	6439      	str	r1, [r7, #64]	; 0x40
 80015d4:	4629      	mov	r1, r5
 80015d6:	eb63 0301 	sbc.w	r3, r3, r1
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015e8:	4649      	mov	r1, r9
 80015ea:	018b      	lsls	r3, r1, #6
 80015ec:	4641      	mov	r1, r8
 80015ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f2:	4641      	mov	r1, r8
 80015f4:	018a      	lsls	r2, r1, #6
 80015f6:	4641      	mov	r1, r8
 80015f8:	1a51      	subs	r1, r2, r1
 80015fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80015fc:	4649      	mov	r1, r9
 80015fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001610:	4649      	mov	r1, r9
 8001612:	00cb      	lsls	r3, r1, #3
 8001614:	4641      	mov	r1, r8
 8001616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800161a:	4641      	mov	r1, r8
 800161c:	00ca      	lsls	r2, r1, #3
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	4603      	mov	r3, r0
 8001624:	4622      	mov	r2, r4
 8001626:	189b      	adds	r3, r3, r2
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
 800162a:	462b      	mov	r3, r5
 800162c:	460a      	mov	r2, r1
 800162e:	eb42 0303 	adc.w	r3, r2, r3
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001640:	4629      	mov	r1, r5
 8001642:	024b      	lsls	r3, r1, #9
 8001644:	4621      	mov	r1, r4
 8001646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800164a:	4621      	mov	r1, r4
 800164c:	024a      	lsls	r2, r1, #9
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001656:	2200      	movs	r2, #0
 8001658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800165c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001660:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001664:	f7fe fdd8 	bl	8000218 <__aeabi_uldivmod>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4613      	mov	r3, r2
 800166e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001672:	e067      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001674:	4b75      	ldr	r3, [pc, #468]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	2200      	movs	r2, #0
 800167c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001680:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
 800168e:	2300      	movs	r3, #0
 8001690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001696:	4622      	mov	r2, r4
 8001698:	462b      	mov	r3, r5
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	0159      	lsls	r1, r3, #5
 80016a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a8:	0150      	lsls	r0, r2, #5
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4621      	mov	r1, r4
 80016b0:	1a51      	subs	r1, r2, r1
 80016b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80016b4:	4629      	mov	r1, r5
 80016b6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016c8:	4649      	mov	r1, r9
 80016ca:	018b      	lsls	r3, r1, #6
 80016cc:	4641      	mov	r1, r8
 80016ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d2:	4641      	mov	r1, r8
 80016d4:	018a      	lsls	r2, r1, #6
 80016d6:	4641      	mov	r1, r8
 80016d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016dc:	4649      	mov	r1, r9
 80016de:	eb63 0b01 	sbc.w	fp, r3, r1
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016f6:	4692      	mov	sl, r2
 80016f8:	469b      	mov	fp, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	eb1a 0303 	adds.w	r3, sl, r3
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	462b      	mov	r3, r5
 8001704:	eb4b 0303 	adc.w	r3, fp, r3
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001716:	4629      	mov	r1, r5
 8001718:	028b      	lsls	r3, r1, #10
 800171a:	4621      	mov	r1, r4
 800171c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001720:	4621      	mov	r1, r4
 8001722:	028a      	lsls	r2, r1, #10
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800172c:	2200      	movs	r2, #0
 800172e:	673b      	str	r3, [r7, #112]	; 0x70
 8001730:	677a      	str	r2, [r7, #116]	; 0x74
 8001732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001736:	f7fe fd6f 	bl	8000218 <__aeabi_uldivmod>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4613      	mov	r3, r2
 8001740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001744:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	3301      	adds	r3, #1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800175a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001766:	e0eb      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d06b      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_GetSysClockFreq+0x354>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	2200      	movs	r2, #0
 8001788:	66bb      	str	r3, [r7, #104]	; 0x68
 800178a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800178c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001792:	663b      	str	r3, [r7, #96]	; 0x60
 8001794:	2300      	movs	r3, #0
 8001796:	667b      	str	r3, [r7, #100]	; 0x64
 8001798:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800179c:	4622      	mov	r2, r4
 800179e:	462b      	mov	r3, r5
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	0159      	lsls	r1, r3, #5
 80017aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ae:	0150      	lsls	r0, r2, #5
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4621      	mov	r1, r4
 80017b6:	1a51      	subs	r1, r2, r1
 80017b8:	61b9      	str	r1, [r7, #24]
 80017ba:	4629      	mov	r1, r5
 80017bc:	eb63 0301 	sbc.w	r3, r3, r1
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ce:	4659      	mov	r1, fp
 80017d0:	018b      	lsls	r3, r1, #6
 80017d2:	4651      	mov	r1, sl
 80017d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d8:	4651      	mov	r1, sl
 80017da:	018a      	lsls	r2, r1, #6
 80017dc:	4651      	mov	r1, sl
 80017de:	ebb2 0801 	subs.w	r8, r2, r1
 80017e2:	4659      	mov	r1, fp
 80017e4:	eb63 0901 	sbc.w	r9, r3, r1
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017fc:	4690      	mov	r8, r2
 80017fe:	4699      	mov	r9, r3
 8001800:	4623      	mov	r3, r4
 8001802:	eb18 0303 	adds.w	r3, r8, r3
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	462b      	mov	r3, r5
 800180a:	eb49 0303 	adc.w	r3, r9, r3
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800181c:	4629      	mov	r1, r5
 800181e:	024b      	lsls	r3, r1, #9
 8001820:	4621      	mov	r1, r4
 8001822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001826:	4621      	mov	r1, r4
 8001828:	024a      	lsls	r2, r1, #9
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001832:	2200      	movs	r2, #0
 8001834:	65bb      	str	r3, [r7, #88]	; 0x58
 8001836:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800183c:	f7fe fcec 	bl	8000218 <__aeabi_uldivmod>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4613      	mov	r3, r2
 8001846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800184a:	e065      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x420>
 800184c:	40023800 	.word	0x40023800
 8001850:	00f42400 	.word	0x00f42400
 8001854:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <HAL_RCC_GetSysClockFreq+0x458>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	2200      	movs	r2, #0
 8001860:	4618      	mov	r0, r3
 8001862:	4611      	mov	r1, r2
 8001864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001868:	653b      	str	r3, [r7, #80]	; 0x50
 800186a:	2300      	movs	r3, #0
 800186c:	657b      	str	r3, [r7, #84]	; 0x54
 800186e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001872:	4642      	mov	r2, r8
 8001874:	464b      	mov	r3, r9
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0159      	lsls	r1, r3, #5
 8001880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001884:	0150      	lsls	r0, r2, #5
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4641      	mov	r1, r8
 800188c:	1a51      	subs	r1, r2, r1
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	4649      	mov	r1, r9
 8001892:	eb63 0301 	sbc.w	r3, r3, r1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018a4:	4659      	mov	r1, fp
 80018a6:	018b      	lsls	r3, r1, #6
 80018a8:	4651      	mov	r1, sl
 80018aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ae:	4651      	mov	r1, sl
 80018b0:	018a      	lsls	r2, r1, #6
 80018b2:	4651      	mov	r1, sl
 80018b4:	1a54      	subs	r4, r2, r1
 80018b6:	4659      	mov	r1, fp
 80018b8:	eb63 0501 	sbc.w	r5, r3, r1
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	00eb      	lsls	r3, r5, #3
 80018c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ca:	00e2      	lsls	r2, r4, #3
 80018cc:	4614      	mov	r4, r2
 80018ce:	461d      	mov	r5, r3
 80018d0:	4643      	mov	r3, r8
 80018d2:	18e3      	adds	r3, r4, r3
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	464b      	mov	r3, r9
 80018d8:	eb45 0303 	adc.w	r3, r5, r3
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ea:	4629      	mov	r1, r5
 80018ec:	028b      	lsls	r3, r1, #10
 80018ee:	4621      	mov	r1, r4
 80018f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f4:	4621      	mov	r1, r4
 80018f6:	028a      	lsls	r2, r1, #10
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001900:	2200      	movs	r2, #0
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
 8001904:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800190a:	f7fe fc85 	bl	8000218 <__aeabi_uldivmod>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4613      	mov	r3, r2
 8001914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_RCC_GetSysClockFreq+0x458>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0f1b      	lsrs	r3, r3, #28
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800192a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001936:	e003      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_GetSysClockFreq+0x45c>)
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800193e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001944:	4618      	mov	r0, r3
 8001946:	37b8      	adds	r7, #184	; 0xb8
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	00f42400 	.word	0x00f42400

08001958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e28d      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8083 	beq.w	8001a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001978:	4b94      	ldr	r3, [pc, #592]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b04      	cmp	r3, #4
 8001982:	d019      	beq.n	80019b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001984:	4b91      	ldr	r3, [pc, #580]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800198c:	2b08      	cmp	r3, #8
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001990:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800199c:	d00c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b84      	ldr	r3, [pc, #528]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d05b      	beq.n	8001a7c <HAL_RCC_OscConfig+0x124>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d157      	bne.n	8001a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e25a      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x90>
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7b      	ldr	r2, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xcc>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0xb4>
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xcc>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6b      	ldr	r2, [pc, #428]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f96e 	bl	8000d0c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f96a 	bl	8000d0c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e21f      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xdc>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f95a 	bl	8000d0c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f956 	bl	8000d0c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e20b      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x104>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d06f      	beq.n	8001b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d017      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x186>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1d3      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4937      	ldr	r1, [pc, #220]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_RCC_OscConfig+0x278>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff f903 	bl	8000d0c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f8ff 	bl	8000d0c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1b4      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4925      	ldr	r1, [pc, #148]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x278>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f8e2 	bl	8000d0c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f8de 	bl	8000d0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e193      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d036      	beq.n	8001be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x27c>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f8c2 	bl	8000d0c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f8be 	bl	8000d0c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e173      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x234>
 8001baa:	e01b      	b.n	8001be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_OscConfig+0x27c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f8ab 	bl	8000d0c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e00e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff f8a7 	bl	8000d0c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d907      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e15c      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ea      	bne.n	8001bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8097 	beq.w	8001d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a7e      	ldr	r2, [pc, #504]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_OscConfig+0x4b0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x4b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4b0>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f867 	bl	8000d0c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f863 	bl	8000d0c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e118      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4b0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x31e>
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a65      	ldr	r2, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x358>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x340>
 8001c7e:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x358>
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a59      	ldr	r2, [pc, #356]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a56      	ldr	r2, [pc, #344]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f828 	bl	8000d0c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f824 	bl	8000d0c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0d7      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ee      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x368>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f812 	bl	8000d0c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff f80e 	bl	8000d0c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0c1      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ee      	bne.n	8001cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a3a      	ldr	r2, [pc, #232]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80ad 	beq.w	8001e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2a:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d060      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d145      	bne.n	8001dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x4b4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe ffe2 	bl	8000d0c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe ffde 	bl	8000d0c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e093      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	071b      	lsls	r3, r3, #28
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x4b4>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7fe ffb3 	bl	8000d0c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe ffaf 	bl	8000d0c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e064      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x452>
 8001dc8:	e05c      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x4b4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ff9c 	bl	8000d0c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe ff98 	bl	8000d0c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e04d      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x480>
 8001df6:	e045      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e040      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_RCC_OscConfig+0x538>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d030      	beq.n	8001e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d129      	bne.n	8001e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d122      	bne.n	8001e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d119      	bne.n	8001e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d10f      	bne.n	8001e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e042      	b.n	8001f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fe12 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	; 0x24
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f82b 	bl	8001f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f38:	b0c0      	sub	sp, #256	; 0x100
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	68d9      	ldr	r1, [r3, #12]
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	ea40 0301 	orr.w	r3, r0, r1
 8001f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f8c:	f021 010c 	bic.w	r1, r1, #12
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fae:	6999      	ldr	r1, [r3, #24]
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	ea40 0301 	orr.w	r3, r0, r1
 8001fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <UART_SetConfig+0x2cc>)
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d005      	beq.n	8001fd4 <UART_SetConfig+0xa0>
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b8d      	ldr	r3, [pc, #564]	; (8002204 <UART_SetConfig+0x2d0>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d104      	bne.n	8001fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fd4:	f7ff fa7c 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 8001fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fdc:	e003      	b.n	8001fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fde:	f7ff fa63 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff0:	f040 810c 	bne.w	800220c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002006:	4622      	mov	r2, r4
 8002008:	462b      	mov	r3, r5
 800200a:	1891      	adds	r1, r2, r2
 800200c:	65b9      	str	r1, [r7, #88]	; 0x58
 800200e:	415b      	adcs	r3, r3
 8002010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002016:	4621      	mov	r1, r4
 8002018:	eb12 0801 	adds.w	r8, r2, r1
 800201c:	4629      	mov	r1, r5
 800201e:	eb43 0901 	adc.w	r9, r3, r1
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800202e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002036:	4690      	mov	r8, r2
 8002038:	4699      	mov	r9, r3
 800203a:	4623      	mov	r3, r4
 800203c:	eb18 0303 	adds.w	r3, r8, r3
 8002040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002044:	462b      	mov	r3, r5
 8002046:	eb49 0303 	adc.w	r3, r9, r3
 800204a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800205a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800205e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002062:	460b      	mov	r3, r1
 8002064:	18db      	adds	r3, r3, r3
 8002066:	653b      	str	r3, [r7, #80]	; 0x50
 8002068:	4613      	mov	r3, r2
 800206a:	eb42 0303 	adc.w	r3, r2, r3
 800206e:	657b      	str	r3, [r7, #84]	; 0x54
 8002070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002078:	f7fe f8ce 	bl	8000218 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4b61      	ldr	r3, [pc, #388]	; (8002208 <UART_SetConfig+0x2d4>)
 8002082:	fba3 2302 	umull	r2, r3, r3, r2
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	011c      	lsls	r4, r3, #4
 800208a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800208e:	2200      	movs	r2, #0
 8002090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800209c:	4642      	mov	r2, r8
 800209e:	464b      	mov	r3, r9
 80020a0:	1891      	adds	r1, r2, r2
 80020a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80020a4:	415b      	adcs	r3, r3
 80020a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020ac:	4641      	mov	r1, r8
 80020ae:	eb12 0a01 	adds.w	sl, r2, r1
 80020b2:	4649      	mov	r1, r9
 80020b4:	eb43 0b01 	adc.w	fp, r3, r1
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020cc:	4692      	mov	sl, r2
 80020ce:	469b      	mov	fp, r3
 80020d0:	4643      	mov	r3, r8
 80020d2:	eb1a 0303 	adds.w	r3, sl, r3
 80020d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020da:	464b      	mov	r3, r9
 80020dc:	eb4b 0303 	adc.w	r3, fp, r3
 80020e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020f8:	460b      	mov	r3, r1
 80020fa:	18db      	adds	r3, r3, r3
 80020fc:	643b      	str	r3, [r7, #64]	; 0x40
 80020fe:	4613      	mov	r3, r2
 8002100:	eb42 0303 	adc.w	r3, r2, r3
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
 8002106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800210a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800210e:	f7fe f883 	bl	8000218 <__aeabi_uldivmod>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4611      	mov	r1, r2
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <UART_SetConfig+0x2d4>)
 800211a:	fba3 2301 	umull	r2, r3, r3, r1
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2264      	movs	r2, #100	; 0x64
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	1acb      	subs	r3, r1, r3
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <UART_SetConfig+0x2d4>)
 8002130:	fba3 2302 	umull	r2, r3, r3, r2
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800213c:	441c      	add	r4, r3
 800213e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800214c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	1891      	adds	r1, r2, r2
 8002156:	63b9      	str	r1, [r7, #56]	; 0x38
 8002158:	415b      	adcs	r3, r3
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002160:	4641      	mov	r1, r8
 8002162:	1851      	adds	r1, r2, r1
 8002164:	6339      	str	r1, [r7, #48]	; 0x30
 8002166:	4649      	mov	r1, r9
 8002168:	414b      	adcs	r3, r1
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002178:	4659      	mov	r1, fp
 800217a:	00cb      	lsls	r3, r1, #3
 800217c:	4651      	mov	r1, sl
 800217e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002182:	4651      	mov	r1, sl
 8002184:	00ca      	lsls	r2, r1, #3
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4603      	mov	r3, r0
 800218c:	4642      	mov	r2, r8
 800218e:	189b      	adds	r3, r3, r2
 8002190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002194:	464b      	mov	r3, r9
 8002196:	460a      	mov	r2, r1
 8002198:	eb42 0303 	adc.w	r3, r2, r3
 800219c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021b4:	460b      	mov	r3, r1
 80021b6:	18db      	adds	r3, r3, r3
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ba:	4613      	mov	r3, r2
 80021bc:	eb42 0303 	adc.w	r3, r2, r3
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021ca:	f7fe f825 	bl	8000218 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <UART_SetConfig+0x2d4>)
 80021d4:	fba3 1302 	umull	r1, r3, r3, r2
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	3332      	adds	r3, #50	; 0x32
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <UART_SetConfig+0x2d4>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	f003 0207 	and.w	r2, r3, #7
 80021f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4422      	add	r2, r4
 80021fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021fc:	e106      	b.n	800240c <UART_SetConfig+0x4d8>
 80021fe:	bf00      	nop
 8002200:	40011000 	.word	0x40011000
 8002204:	40011400 	.word	0x40011400
 8002208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800220c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002210:	2200      	movs	r2, #0
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800221a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800221e:	4642      	mov	r2, r8
 8002220:	464b      	mov	r3, r9
 8002222:	1891      	adds	r1, r2, r2
 8002224:	6239      	str	r1, [r7, #32]
 8002226:	415b      	adcs	r3, r3
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800222e:	4641      	mov	r1, r8
 8002230:	1854      	adds	r4, r2, r1
 8002232:	4649      	mov	r1, r9
 8002234:	eb43 0501 	adc.w	r5, r3, r1
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	00eb      	lsls	r3, r5, #3
 8002242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002246:	00e2      	lsls	r2, r4, #3
 8002248:	4614      	mov	r4, r2
 800224a:	461d      	mov	r5, r3
 800224c:	4643      	mov	r3, r8
 800224e:	18e3      	adds	r3, r4, r3
 8002250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002254:	464b      	mov	r3, r9
 8002256:	eb45 0303 	adc.w	r3, r5, r3
 800225a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800226a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800227a:	4629      	mov	r1, r5
 800227c:	008b      	lsls	r3, r1, #2
 800227e:	4621      	mov	r1, r4
 8002280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002284:	4621      	mov	r1, r4
 8002286:	008a      	lsls	r2, r1, #2
 8002288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800228c:	f7fd ffc4 	bl	8000218 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4b60      	ldr	r3, [pc, #384]	; (8002418 <UART_SetConfig+0x4e4>)
 8002296:	fba3 2302 	umull	r2, r3, r3, r2
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	011c      	lsls	r4, r3, #4
 800229e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	1891      	adds	r1, r2, r2
 80022b6:	61b9      	str	r1, [r7, #24]
 80022b8:	415b      	adcs	r3, r3
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c0:	4641      	mov	r1, r8
 80022c2:	1851      	adds	r1, r2, r1
 80022c4:	6139      	str	r1, [r7, #16]
 80022c6:	4649      	mov	r1, r9
 80022c8:	414b      	adcs	r3, r1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d8:	4659      	mov	r1, fp
 80022da:	00cb      	lsls	r3, r1, #3
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e2:	4651      	mov	r1, sl
 80022e4:	00ca      	lsls	r2, r1, #3
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	4642      	mov	r2, r8
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022f4:	464b      	mov	r3, r9
 80022f6:	460a      	mov	r2, r1
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	67bb      	str	r3, [r7, #120]	; 0x78
 800230a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002318:	4649      	mov	r1, r9
 800231a:	008b      	lsls	r3, r1, #2
 800231c:	4641      	mov	r1, r8
 800231e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002322:	4641      	mov	r1, r8
 8002324:	008a      	lsls	r2, r1, #2
 8002326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800232a:	f7fd ff75 	bl	8000218 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4611      	mov	r1, r2
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <UART_SetConfig+0x4e4>)
 8002336:	fba3 2301 	umull	r2, r3, r3, r1
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2264      	movs	r2, #100	; 0x64
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	1acb      	subs	r3, r1, r3
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	3332      	adds	r3, #50	; 0x32
 8002348:	4a33      	ldr	r2, [pc, #204]	; (8002418 <UART_SetConfig+0x4e4>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002354:	441c      	add	r4, r3
 8002356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235a:	2200      	movs	r2, #0
 800235c:	673b      	str	r3, [r7, #112]	; 0x70
 800235e:	677a      	str	r2, [r7, #116]	; 0x74
 8002360:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	415b      	adcs	r3, r3
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002374:	4641      	mov	r1, r8
 8002376:	1851      	adds	r1, r2, r1
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	4649      	mov	r1, r9
 800237c:	414b      	adcs	r3, r1
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800238c:	4659      	mov	r1, fp
 800238e:	00cb      	lsls	r3, r1, #3
 8002390:	4651      	mov	r1, sl
 8002392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002396:	4651      	mov	r1, sl
 8002398:	00ca      	lsls	r2, r1, #3
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	4642      	mov	r2, r8
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80023a6:	464b      	mov	r3, r9
 80023a8:	460a      	mov	r2, r1
 80023aa:	eb42 0303 	adc.w	r3, r2, r3
 80023ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	663b      	str	r3, [r7, #96]	; 0x60
 80023ba:	667a      	str	r2, [r7, #100]	; 0x64
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023c8:	4649      	mov	r1, r9
 80023ca:	008b      	lsls	r3, r1, #2
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023d2:	4641      	mov	r1, r8
 80023d4:	008a      	lsls	r2, r1, #2
 80023d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023da:	f7fd ff1d 	bl	8000218 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <UART_SetConfig+0x4e4>)
 80023e4:	fba3 1302 	umull	r1, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2164      	movs	r1, #100	; 0x64
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <UART_SetConfig+0x4e4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	f003 020f 	and.w	r2, r3, #15
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4422      	add	r2, r4
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002412:	46bd      	mov	sp, r7
 8002414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002418:	51eb851f 	.word	0x51eb851f

0800241c <memset>:
 800241c:	4402      	add	r2, r0
 800241e:	4603      	mov	r3, r0
 8002420:	4293      	cmp	r3, r2
 8002422:	d100      	bne.n	8002426 <memset+0xa>
 8002424:	4770      	bx	lr
 8002426:	f803 1b01 	strb.w	r1, [r3], #1
 800242a:	e7f9      	b.n	8002420 <memset+0x4>

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	4d0d      	ldr	r5, [pc, #52]	; (8002464 <__libc_init_array+0x38>)
 8002430:	4c0d      	ldr	r4, [pc, #52]	; (8002468 <__libc_init_array+0x3c>)
 8002432:	1b64      	subs	r4, r4, r5
 8002434:	10a4      	asrs	r4, r4, #2
 8002436:	2600      	movs	r6, #0
 8002438:	42a6      	cmp	r6, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	4d0b      	ldr	r5, [pc, #44]	; (800246c <__libc_init_array+0x40>)
 800243e:	4c0c      	ldr	r4, [pc, #48]	; (8002470 <__libc_init_array+0x44>)
 8002440:	f000 f820 	bl	8002484 <_init>
 8002444:	1b64      	subs	r4, r4, r5
 8002446:	10a4      	asrs	r4, r4, #2
 8002448:	2600      	movs	r6, #0
 800244a:	42a6      	cmp	r6, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f855 3b04 	ldr.w	r3, [r5], #4
 8002454:	4798      	blx	r3
 8002456:	3601      	adds	r6, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	f855 3b04 	ldr.w	r3, [r5], #4
 800245e:	4798      	blx	r3
 8002460:	3601      	adds	r6, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	080024bc 	.word	0x080024bc
 8002468:	080024bc 	.word	0x080024bc
 800246c:	080024bc 	.word	0x080024bc
 8002470:	080024c0 	.word	0x080024c0

08002474 <strcpy>:
 8002474:	4603      	mov	r3, r0
 8002476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800247a:	f803 2b01 	strb.w	r2, [r3], #1
 800247e:	2a00      	cmp	r2, #0
 8002480:	d1f9      	bne.n	8002476 <strcpy+0x2>
 8002482:	4770      	bx	lr

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
